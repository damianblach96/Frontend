def imageName="damianblach/frontend"
def dockerRegistry=""
def registryCredentials="20c7b3a4-3dc7-4808-a43e-6a7057c872cb"
def dockerTag=""

pipeline {
    agent {
  label 'agent'
}

environment {
  ScannerHome = tool 'SonarQube'
}


    stages {
        stage('Get Code') {
            steps {
                checkout scm
            }
        }
    
    
        stage('ListFiles') {
            steps {
                sh 'ls -la'
            }
        }
        
        stage('RunUnitTests') {
            steps {
                sh 'pip3 install -r requirements.txt && python3 -m pytest --cov=. --cov-report xml:test-results/coverage.xml --junitxml=test-results/pytest-report.xml'

            }
        }
        
        stage('SonarQubeScan') {
            steps {
                
            withSonarQubeEnv("SonarQube"){
                   sh "${scannerHome}/bin/sonar-scanner"
                    }
                timeout(1) {
                    waitForQualityGate abortPipeline: true
              }
            }
        }
        stage('Build application image'){
            steps {
                script {
                    // Prepare basic image for application
                    dockerTag = "1.0"
                    
                    applicationImage=docker.build("$imageName:$dockerTag",".")
                }
            }
        }
        stage('pushImage'){
            steps {
                script {
                withDockerRegistry(credentialsId: "$registryCredentials", url: "$dockerRegistry") {
                applicationImage.push()
            }
                }
            }
        }
    }

post {
        always {
            junit testResults: "test-results/*.xml"
            cleanWs()
        }
    }
}
